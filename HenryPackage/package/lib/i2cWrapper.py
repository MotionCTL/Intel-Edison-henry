# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_i2cWrapper', [dirname(__file__)])
        except ImportError:
            import _i2cWrapper
            return _i2cWrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_i2cWrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _i2cWrapper = swig_import_helper()
    del swig_import_helper
else:
    import _i2cWrapper
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class I2CContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, I2CContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, I2CContext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reg"] = _i2cWrapper.I2CContext_reg_set
    __swig_getmethods__["reg"] = _i2cWrapper.I2CContext_reg_get
    if _newclass:reg = _swig_property(_i2cWrapper.I2CContext_reg_get, _i2cWrapper.I2CContext_reg_set)
    __swig_setmethods__["bus"] = _i2cWrapper.I2CContext_bus_set
    __swig_getmethods__["bus"] = _i2cWrapper.I2CContext_bus_get
    if _newclass:bus = _swig_property(_i2cWrapper.I2CContext_bus_get, _i2cWrapper.I2CContext_bus_set)
    __swig_setmethods__["fileHandle"] = _i2cWrapper.I2CContext_fileHandle_set
    __swig_getmethods__["fileHandle"] = _i2cWrapper.I2CContext_fileHandle_get
    if _newclass:fileHandle = _swig_property(_i2cWrapper.I2CContext_fileHandle_get, _i2cWrapper.I2CContext_fileHandle_set)
    def __init__(self): 
        this = _i2cWrapper.new_I2CContext()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _i2cWrapper.delete_I2CContext
    __del__ = lambda self : None;
I2CContext_swigregister = _i2cWrapper.I2CContext_swigregister
I2CContext_swigregister(I2CContext)


def i2cWriteByte(*args):
  return _i2cWrapper.i2cWriteByte(*args)
i2cWriteByte = _i2cWrapper.i2cWriteByte

def i2cWriteBytes(*args):
  return _i2cWrapper.i2cWriteBytes(*args)
i2cWriteBytes = _i2cWrapper.i2cWriteBytes

def i2cReadByte(*args):
  return _i2cWrapper.i2cReadByte(*args)
i2cReadByte = _i2cWrapper.i2cReadByte

def i2cReadBytes(*args):
  return _i2cWrapper.i2cReadBytes(*args)
i2cReadBytes = _i2cWrapper.i2cReadBytes

def i2cOpen(*args):
  return _i2cWrapper.i2cOpen(*args)
i2cOpen = _i2cWrapper.i2cOpen

def i2c_open_device(*args):
  return _i2cWrapper.i2c_open_device(*args)
i2c_open_device = _i2cWrapper.i2c_open_device

def i2c_set_slave(*args):
  return _i2cWrapper.i2c_set_slave(*args)
i2c_set_slave = _i2cWrapper.i2c_set_slave

def i2c_receive_byte(*args):
  return _i2cWrapper.i2c_receive_byte(*args)
i2c_receive_byte = _i2cWrapper.i2c_receive_byte

def i2c_read_bytes(*args):
  return _i2cWrapper.i2c_read_bytes(*args)
i2c_read_bytes = _i2cWrapper.i2c_read_bytes

def i2c_send_byte(*args):
  return _i2cWrapper.i2c_send_byte(*args)
i2c_send_byte = _i2cWrapper.i2c_send_byte

def i2c_write_bytes(*args):
  return _i2cWrapper.i2c_write_bytes(*args)
i2c_write_bytes = _i2cWrapper.i2c_write_bytes
# This file is compatible with both classic and new-style classes.


